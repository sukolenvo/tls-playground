#include <array>

#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>

#include "aes.hpp"

TEST_CASE("aes128_cbc")
{
	auto task = GENERATE(
			std::vector<unsigned char>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf }
	);
	CAPTURE(task);
	const std::array<unsigned char, 16> iv{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
											0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 };
	const std::array<unsigned char, 16> key{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
											 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb };

	REQUIRE(aes128_cbc_decrypt(aes128_cbc_encrypt(task, iv, key), iv, key) == task);
}


TEST_CASE("aes192_cbc")
{
	auto task = GENERATE(
			std::vector<unsigned char>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf }
	);
	CAPTURE(task);
	const std::array<unsigned char, 16> iv{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
											0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 };
	const std::array<unsigned char, 24> key{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
											 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
											 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38};

	REQUIRE(aes192_cbc_decrypt(aes192_cbc_encrypt(task, iv, key), iv, key) == task);
}


TEST_CASE("aes256_cbc")
{
	auto task = GENERATE(
			std::vector<unsigned char>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf }
	);
	CAPTURE(task);
	const std::array<unsigned char, 16> iv{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
											0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 };
	const std::array<unsigned char, 32> key{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
											 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
											 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
											 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb};

	REQUIRE(aes256_cbc_decrypt(aes256_cbc_encrypt(task, iv, key), iv, key) == task);
}
