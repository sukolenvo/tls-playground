#include <array>

#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>

#include "utils.hpp"
#include "aes.hpp"

TEST_CASE("aes128_cbc")
{
    auto task = GENERATE(
            std::vector<unsigned char>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf }
    );
    CAPTURE(task);
    const std::array<unsigned char, 16> iv{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
                                            0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 };
    const std::array<unsigned char, 16> key{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
                                             0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb };

    REQUIRE(aes128_cbc_decrypt(aes128_cbc_encrypt(task, iv, key), iv, key) == task);
}

TEST_CASE("aes128_cbc encrypt")
{
    auto input =
            std::vector<unsigned char>{ 0x14, 0x00, 0x00, 0x0c, 0xde, 0x5b, 0xc4, 0x8d, 0xd6, 0x1e, 0xe4,
                                        0x49, 0x27, 0x57, 0xc6, 0x60, 0x61, 0x3c, 0x78, 0xc8, 0x26, 0x1c, 0x61, 0xda,
                                        0x82, 0x9e, 0x16,
                                        0xc6, 0xee, 0xb9, 0x21, 0x77, 0xd1, 0x47, 0x90, 0xe3, 0x0b, 0x0b, 0x0b, 0x0b,
                                        0x0b, 0x0b, 0x0b,
                                        0x0b, 0x0b, 0x0b, 0x0b, 0x0b };
    const std::array<unsigned char, 16> iv{ 0x02, 0xf0, 0x73, 0x49, 0xdd, 0x84, 0x4e, 0xf8, 0x2f, 0x4a, 0xea, 0xb4,
                                            0x73, 0x4a, 0xce, 0x34 };
    const std::array<unsigned char, 16> key{ 0xd6, 0x91, 0xb0, 0x1f, 0xd8, 0x5f, 0xa1, 0x93, 0x5c, 0xc6, 0x35, 0x88,
                                             0x06, 0x50, 0x29, 0x1c };
    const auto result = aes128_cbc_encrypt(input, iv, key);
    REQUIRE(hexStr(result.begin(), result.end()) ==
            "e7a5ed0dedb0ef969c8365488e252a5aee447ca7919630843426ea7597f73947513a1f204bb2c719be6c5d31b0f94d8f");
}

TEST_CASE("aes192_cbc")
{
    auto task = GENERATE(
            std::vector<unsigned char>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf }
    );
    CAPTURE(task);
    const std::array<unsigned char, 16> iv{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
                                            0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 };
    const std::array<unsigned char, 24> key{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
                                             0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
                                             0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38 };

    REQUIRE(aes192_cbc_decrypt(aes192_cbc_encrypt(task, iv, key), iv, key) == task);
}


TEST_CASE("aes256_cbc")
{
    auto task = GENERATE(
            std::vector<unsigned char>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf }
    );
    CAPTURE(task);
    const std::array<unsigned char, 16> iv{ 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
                                            0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 };
    const std::array<unsigned char, 32> key{ 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
                                             0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
                                             0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38,
                                             0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb };

    REQUIRE(aes256_cbc_decrypt(aes256_cbc_encrypt(task, iv, key), iv, key) == task);
}
