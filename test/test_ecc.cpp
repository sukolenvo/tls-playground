#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>

#include "utils.hpp"
#include "ecc.hpp"

TEST_CASE("elliptic curve cryptography")
{
    EllipticCurve ecc{ BigNumber({ 1 }), BigNumber({ 1 }), BigNumber({ 23 }) };
    BigPoint generator{ BigNumber({ 5 }), BigNumber({ 19 }) };

    const BigNumber first_private_key({ 4 });
    const auto first_public_key = ecc.multiply_point(generator, first_private_key);
    const BigNumber second_private_key({ 2 });
    const auto second_public_key = ecc.multiply_point(generator, second_private_key);

    const auto first_shared_secret = ecc.multiply_point(second_public_key, first_private_key);
    const auto second_shared_secret = ecc.multiply_point(first_public_key, second_private_key);
    REQUIRE(first_shared_secret == second_shared_secret);
}

TEST_CASE("elliptic curve multiply")
{
    const EllipticCurve curve{
            BigNumber({ 3 }, Sign::MINUS),
            BigNumber({
                    0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7, 0xB3, 0xEB, 0xBD, 0x55, 0x76,
                    0x98, 0x86, 0xBC, 0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6, 0x3B, 0xCE,
                    0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B
            }),
            BigNumber({
                    0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
                    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
            })
    };
    const BigPoint point{ BigNumber({
            0x6B, 0x17, 0xD1, 0xF2, 0xE1, 0x2C, 0x42, 0x47, 0xF8, 0xBC, 0xE6, 0xE5,
            0x63,
            0xA4, 0x40, 0xF2, 0x77, 0x03, 0x7D, 0x81, 0x2D, 0xEB, 0x33, 0xA0, 0xF4,
            0xA1,
            0x39, 0x45, 0xD8, 0x98, 0xC2, 0x96
    }), BigNumber({
            0x4F, 0xE3, 0x42, 0xE2, 0xFE, 0x1A, 0x7F, 0x9B, 0x8E, 0xE7, 0xEB, 0x4A, 0x7C,
            0x0F, 0x9E, 0x16, 0x2B, 0xCE, 0x33, 0x57, 0x6B, 0x31, 0x5E, 0xCE, 0xCB, 0xB6,
            0x40, 0x68, 0x37, 0xBF, 0x51, 0xF5
    }) };

    const auto result = curve.multiply_point(point, BigNumber({
            0x9E,
            0x56, 0xF5, 0x09, 0x19, 0x67, 0x84, 0xD9, 0x63, 0xD1, 0xC0,
            0xA4, 0x01, 0x51, 0x0E, 0xE7, 0xAD, 0xA3, 0xDC, 0xC5, 0xDE, 0xE0,
            0x4B, 0x15, 0x4B, 0xF6, 0x1A, 0xF1, 0xD5, 0xA6, 0xDE, 0xCE
    }));

    const auto bData = {
            0x5A, 0xC6, 0x35, 0xD8, 0xAA, 0x3A, 0x93, 0xE7, 0xB3, 0xEB, 0xBD, 0x55, 0x76,
            0x98, 0x86, 0xBC, 0x65, 0x1D, 0x06, 0xB0, 0xCC, 0x53, 0xB0, 0xF6, 0x3B, 0xCE,
            0x3C, 0x3E, 0x27, 0xD2, 0x60, 0x4B
    };
    CAPTURE(hexStr(bData.begin(), bData.end()));
    const auto xData = result.x.data();
    const auto yData = result.y.data();
    REQUIRE(hexStr(xData.begin(), xData.end()) == "cb28e0999b9c7715fd0a80d8e47a77079716cbbf917dd72e97566ea1c066957c");
    REQUIRE(hexStr(yData.begin(), yData.end()) == "2b57c0235fb7489768d058ff4911c20fdbe71e3699d91339afbb903ee17255dc");
}