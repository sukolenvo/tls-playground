#include <catch2/catch_test_macros.hpp>
#include <catch2/generators/catch_generators.hpp>

#include "rsa.hpp"

TEST_CASE("compute")
{
    BigNumber message({ 0x02, 0xB0 }); // 688
    BigNumber exp({ 0x4F }); // 79
    BigNumber modulus({ 0x0D, 0x09 }); // 3337
    BigNumber p_exp({ 0x03, 0xFB }); // 1019
    const auto encrypted = rsa_compute(message, exp, modulus);
    CAPTURE(encrypted);
    REQUIRE(rsa_compute(encrypted, p_exp, modulus) == message);
}

const auto modulus = std::vector<unsigned char>{
        0xC4, 0xF8, 0xE9, 0xE1, 0x5D, 0xCA, 0xDF, 0x2B,
        0x96, 0xC7, 0x63, 0xD9, 0x81, 0x00, 0x6A, 0x64,
        0x4F, 0xFB, 0x44, 0x15, 0x03, 0x0A, 0x16, 0xED,
        0x12, 0x83, 0x88, 0x33, 0x40, 0xF2, 0xAA, 0x0E,
        0x2B, 0xE2, 0xBE, 0x8F, 0xA6, 0x01, 0x50, 0xB9,
        0x04, 0x69, 0x65, 0x83, 0x7C, 0x3E, 0x7D, 0x15,
        0x1B, 0x7D, 0xE2, 0x37, 0xEB, 0xB9, 0x57, 0xC2,
        0x06, 0x63, 0x89, 0x82, 0x50, 0x70, 0x3B, 0x3F
};

const auto private_key = std::vector<unsigned char>{
        0x8a, 0x7e, 0x79, 0xf3, 0xfb, 0xfe, 0xa8, 0xeb,
        0xfd, 0x18, 0x35, 0x1c, 0xb9, 0x97, 0x91, 0x36,
        0xf7, 0x05, 0xb4, 0xd9, 0x11, 0x4a, 0x06, 0xd4,
        0xaa, 0x2f, 0xd1, 0x94, 0x38, 0x16, 0x67, 0x7a,
        0x53, 0x74, 0x66, 0x18, 0x46, 0xa3, 0x0c, 0x45,
        0xb3, 0x0a, 0x02, 0x4b, 0x4d, 0x22, 0xb1, 0x5a,
        0xb3, 0x23, 0x62, 0x2b, 0x2d, 0xe4, 0x7b, 0xa2,
        0x91, 0x15, 0xf0, 0x6e, 0xe4, 0x2c, 0x41
};

const auto public_key = std::vector<unsigned char>{ 0x01, 0x00, 0x01 };

TEST_CASE("encrypt_decrypt")
{
    auto task = GENERATE(
            std::vector<unsigned char>{},
            std::vector<unsigned char>{ 'a', 'b', 'c' },
            std::vector<unsigned char>(1000, 'a')
    );
    CAPTURE(task);
    const auto cypher = rsa_encrypt(task, BigNumber{ public_key }, BigNumber{ modulus });
    REQUIRE(rsa_decrypt(cypher, BigNumber{ private_key }, BigNumber{ modulus }) == task);
}